This is a MIDI implementation of a MOS8580 6581 SID chip using the reSID library. It includes support for scripted instruments that allow complex sonic control of the chip.


Dependencies:
libglib-2.0
libjack-dev (standalone version)
liblv2-dev (plugin version)

Once the dependencies are fulfilled return to this folder and run:
   mkdir build
   cd build
   cmake ..
   make
   sudo make install
   
Currently this will build and install the standalone and the lv2 plugin. At some point I hope it will allow just one or just the other if you want.

reMID has scripting capabilities so that you can create instruments and files containing banks of instruments. You cannot actually get any sound out of reMID without an instrument file (so naturally we include and install a default and several others can be found in instruments/). See instruments.conf for examples and more info on instrument parameters.

Note that the original design was intended to allow a sequencer to control a single instance of reMID and perform an entire chiptune piece through use of midi channels and program changes. That capability remains, but the more modern use of each instance having a sound is also available.

full documentation for the instrument programming is at http://gp2x.org/remid/inst_config.php 
A full datasheet of the SID is pretty helpful too if you aren't familiar with it. See http://archive.6502.org/datasheets/mos_6581_sid.pdf

Here are the basics for setting the registers. Usually working in hex is easier, though you can use decimal numbers if you really want.

vN_control  0x80 - noise 
            0x40 - pulse (square/rectangle)
            0x20 - saw
            0x10 - triangle
            0x04 - ring mod with voice(N-1) (where 1-1 == 3)
            0x02 - sync with voice(N-1) (where 1-1 == 3)

vN_pulse    [0x000,0xfff]==[0,4095] pulse width when pulse waveform selected 
                in control reg. 0x800 is a square wave. 0 is DC 0, 0xfff is DC 1

vN_ad       [0x00,0xff] 0xXY - X is attack, Y decay. They aren't linear, but 
                larger is longer the link above has tables.
vN_sr       [0x00,0xff] 0xXY - same idea as ad register but sustain and release
                for each nibble

filter_cutoff [0x000,0x7ff]==[0,2047] cutoff frequency which ranges linearly 
                from about 30Hz to 12kHz
fr_vic      [0x00,0xf7] 0xXY - X sets filter resonance, Y sets filter connections 
            0xX7 - filter all 3 voices
            0xX4 - filter only voice1
            0xX2 - filter only voice2
            0xX1 - filter only voice3
            0xX0 - bypass filter

filter_mode 0x4 - highpass
            0x2 - bandpass
            0x1 - lowpass

There are some other options, but those are the most common.
For scripting I reccomend you look at some examples and/or the official docuement linked above. The files in the instruments directory has many examples to look at.
